name: Run Ardo for macOS

on:
  push:
    branches: 
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    branches: 
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  workflow_dispatch:
  repository_dispatch:
    types: ardo-build-macos

env:
  ARDOUR_VERSION: "8.1"
  # available upload services: wetransfer.com, file.io, 0x0.st
  UPLOAD_SERVICE: wetransfer.com
  # https://community.ardour.org/srctar
  # https://fossies.org/linux/misc/Ardour-6.8.0.tar.bz2
  ARTIFACT_RETENTION_DAYS: 3

jobs:
  ardo-build:
    name: Run Ardo for macOS ${{ matrix.config.arch }}
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              arch: x86_64
            }
          - { 
              # requires macOS 11.0 SDK (or later)
              arch: arm64
            }
    steps:
      
      # - name: Download CA Certification
      #   # https://stackoverflow.com/a/54503009
      #   shell: bash
      #   run: |
      #     brew info openssl

      #     echo "Downloading cacert.pem..."
      #     curl -sSL http://curl.haxx.se/ca/cacert.pem >> cacert.pem

      #     mv -v cacert.pem /usr/local/etc/openssl@1.1/certs

      - name: Check Perl
        shell: bash
        run: |
          perl -V

      # - name: Install XML::Parser perl module
      #   shell: bash
      #   run: |
      #     brew install cpanminus
      #     cpanm XML::Parser

      - name: Install XML::Parser perl module
        shell: bash
        run: |
          cpan XML::Parser

      - name: Check XML::Parser perl module
        shell: bash
        run: |
          perl -e "require XML::Parser"
          perldoc -l XML::Parser

      # distutils package is removed in python version 3.12,
      # the setuptools project can be installed: it still provides distutils.
      # https://docs.python.org/3.12/whatsnew/3.12.html
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - name: Checkout Build Tools Source Code
        if: github.event_name == 'push'
        uses: actions/checkout@v4
        with:
          repository: magicalbox/ardo
          token: ${{ secrets.GH_PAT }} 
          fetch-depth: 0
          ref: main
          path: '.'

      - name: Checkout Build Tools Source Code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          path: '.'

      - name: Get Ardo Latest Release Source Code
        uses: actions/checkout@v4
        with:
          repository: 'Ardour/ardour'
          fetch-depth: 1
          ref: ${{ env.ARDOUR_VERSION }}
          path: './src'
        
      - name: Print Clang Version
        # https://stackoverflow.com/a/20874420
        shell: bash
        run: |
          clang --version

      - name: Uninstall actions built-in libxrender & cairo & libx11
        # due to typedef redefinition with different types with cairo-xlib-private.h
        if: matrix.config.arch == 'arm64'
        shell: bash
        run: |
          brew uninstall --ignore-dependencies libxrender
          brew uninstall --ignore-dependencies cairo
          brew uninstall --ignore-dependencies libx11

      - name: Prepare
        shell: bash
        run: |
          chmod a+x ${{ github.workspace }}/scripts/ardour-build-tools/waf
          chmod a+x ${{ github.workspace }}/scripts/ardour-build-tools/rb-wscript
          chmod a+x ${{ github.workspace }}/scripts/ardour-build-tools/vamp-wscript
          chmod a+x ${{ github.workspace }}/src/waf
          chmod a+x ${{ github.workspace }}/src/wscript
      # https://stackoverflow.com/questions/11287564/getting-sed-error-illegal-byte-sequence-in-bash

      - name: Set env
        if: matrix.config.arch == 'x86_64'
        shell: bash
        run: |
          echo "LC_CTYPE=C" >> $GITHUB_ENV
          echo "HOME=${{ github.workspace }}/macos-${{ matrix.config.arch }}" >> $GITHUB_ENV
          echo "PATH=/usr/lib/ccache:${{ github.workspace }}/macos-${{ matrix.config.arch }}/bin:${{ github.workspace }}/macos-${{ matrix.config.arch }}/gtk/inst/bin/:$PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${{ github.workspace }}/macos-${{ matrix.config.arch }}/gtk/inst/lib/pkgconfig/:/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig/" >> $GITHUB_ENV
          echo "PYTHONPATH=./:${{ github.workspace }}/macos-${{ matrix.config.arch }}/gtk/inst/lib/python`python --version 2>&1 | cut -d ' ' -f 2 | cut -b 1-3`/site-packages/" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${{ github.workspace }}/macos-${{ matrix.config.arch }}/gtk/inst/lib/" >> $GITHUB_ENV
          echo "PERL5LIB=/usr/local/Cellar/perl/`perl -e 'print substr($^V, 1)'`/lib/perl5/site_perl/`perl -e 'print substr($^V, 1)'`:/usr/local/Cellar/perl/`perl -e 'print substr($^V, 1)'`/lib/perl5/`perl -e 'print substr($^V, 1)'`:/usr/local/lib/perl5/site_perl/`perl -e 'print substr($^V, 1)'`:$PERL5LIB" >> $GITHUB_ENV
      
      - name: Set env
        if: matrix.config.arch == 'arm64'
        shell: bash
        run: |
          echo "LC_CTYPE=C" >> $GITHUB_ENV
          echo "HOME=${{ github.workspace }}/macos-${{ matrix.config.arch }}" >> $GITHUB_ENV

      - name: Print env
        shell: bash
        run: |
          env

      - name: Install Build Stack
        if: matrix.config.arch == 'x86_64'
        shell: bash
        run: |
          bash ${{ github.workspace }}/scripts/ardour-build-tools/build-stack

      - name: Install Build Stack
        if: matrix.config.arch == 'arm64'
        shell: bash
        run: |
          bash ${{ github.workspace }}/scripts/ardour-build-tools/x-applearm.sh

      - name: Compile
        if: matrix.config.arch == 'x86_64'
        # --depstack-root defaults to ~ 
        # nproc returns logical cores. The mac equivalent of that is sysctl -n hw.logicalcpu instead of sysctl -n hw.physicalcpu
        shell: bash
        run: |
          cd ${{ github.workspace }}/src
          ./waf configure --strict --with-backends=jack,coreaudio,dummy --ptformat --optimize --cxx11
          ./waf -j$(sysctl -n hw.logicalcpu)
          ./waf i18n
          ./waf install

      - name: Compile
        if: matrix.config.arch == 'arm64'
        # --depstack-root defaults to ~ 
        # nproc returns logical cores. The mac equivalent of that is sysctl -n hw.logicalcpu instead of sysctl -n hw.physicalcpu
        shell: bash
        env:
          PREFIX: ${{ github.workspace }}/macos-${{ matrix.config.arch }}/gtk/inst
          PKG_CONFIG_PATH: ${{ github.workspace }}/macos-${{ matrix.config.arch }}/gtk/inst/lib/pkgconfig/:${{ github.workspace }}/macos-${{ matrix.config.arch }}/gtk/tool/lib/pkgconfig/
        run: |
          cd ${{ github.workspace }}/src
          CPPFLAGS="-Wno-error -Wno-nullability-completeness -Wno-expansion-to-defined -Wno-builtin-requires-header" \
          CFLAGS="-DMAC_OS_X_VERSION_MAX_ALLOWED=110000 -mmacosx-version-min=11.0" \
          CXXFLAGS="-DMAC_OS_X_VERSION_MAX_ALLOWED=110000 -mmacosx-version-min=11.0" \
          LDFLAGS="-L${PREFIX}/lib -headerpad_max_install_names" \
          DEPSTACK_ROOT="$PREFIX" \
          ./waf configure \
            --strict \
            --keepflags \
            --also-include=${PREFIX}/include \
            --dist-target=arm64 \
            --prefix=${PREFIX} \
            --libdir=${PREFIX}/lib \
            --with-backends=jack,coreaudio,dummy \
            --ptformat \
            --optimize \
            --cxx11 \
            --use-libc++ \
            --arm64
          ./waf -j$(sysctl -n hw.logicalcpu)
          ./waf i18n
          ./waf install

      - name: Package
        shell: bash
        run: |
          cd ${{ github.workspace }}/src/tools/osx_packaging
          bash ./osx_build --nls --public

      - name: Generate sha256sum & Upload Binary
        # ${{ github.workspace }}/src/tools/osx_packaging/Ardour-6.8.0.dmg
        if: matrix.config.arch == 'x86_64'
        shell: bash
        run: |
          SHA256SUM=$(shasum -a 256 ${{ github.workspace }}/src/tools/osx_packaging/Ardour-*.dmg | cut -d ' ' -f 1)
          echo "${SHA256SUM}" > ${{ github.workspace }}/src/tools/osx_packaging/Ardour-${{ env.ARDOUR_VERSION }}-${{ matrix.config.arch }}.dmg.sha256sum
          echo "sha256sum: ${SHA256SUM}"
          TEMP_DOWNLOAD_URL=$(sh ${{ github.workspace }}/scripts/upload-services/${{ env.UPLOAD_SERVICE }}.sh ${{ github.workspace }}/src/tools/osx_packaging/Ardour-*.dmg)
          echo Download URL is $TEMP_DOWNLOAD_URL

      - name: Generate sha256sum & Upload Binary
        # ${{ github.workspace }}/src/tools/osx_packaging/Ardour-6.8.0-arm64.dmg
        if: matrix.config.arch == 'arm64'
        shell: bash
        run: |
          SHA256SUM=$(shasum -a 256 ${{ github.workspace }}/src/tools/osx_packaging/Ardour-*.dmg | cut -d ' ' -f 1)
          echo "${SHA256SUM}" > ${{ github.workspace }}/src/tools/osx_packaging/Ardour-${{ env.ARDOUR_VERSION }}-${{ matrix.config.arch }}.dmg.sha256sum
          echo "sha256sum: ${SHA256SUM}"
          TEMP_DOWNLOAD_URL=$(sh ${{ github.workspace }}/scripts/upload-services/${{ env.UPLOAD_SERVICE }}.sh ${{ github.workspace }}/src/tools/osx_packaging/Ardour-*.dmg)
          echo Download URL is $TEMP_DOWNLOAD_URL

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Ardour-MacOS-Artifact
          path: |
            ${{ github.workspace }}/src/tools/osx_packaging/Ardour-*.dmg
            ${{ github.workspace }}/src/tools/osx_packaging/Ardour-*.dmg.sha256sum
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
